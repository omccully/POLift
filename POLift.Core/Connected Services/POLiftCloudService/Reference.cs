//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POLift.Core.POLiftCloudService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiftingProgram", Namespace="http://schemas.datacontract.org/2004/07/POLiftWcfWebRole.Models")]
    public partial class LiftingProgram : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string FileNameField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="POLiftCloudService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllLiftingPrograms", ReplyAction="http://tempuri.org/IService/GetAllLiftingProgramsResponse")]
        System.IAsyncResult BeginGetAllLiftingPrograms(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram> EndGetAllLiftingPrograms(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/TimeLeftInTrial", ReplyAction="http://tempuri.org/IService/TimeLeftInTrialResponse")]
        System.IAsyncResult BeginTimeLeftInTrial(string deviceId, System.AsyncCallback callback, object asyncState);
        
        System.TimeSpan EndTimeLeftInTrial(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DownloadLiftingProgram", ReplyAction="http://tempuri.org/IService/DownloadLiftingProgramResponse")]
        System.IAsyncResult BeginDownloadLiftingProgram(string fileName, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDownloadLiftingProgram(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : POLift.Core.POLiftCloudService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllLiftingProgramsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllLiftingProgramsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimeLeftInTrialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TimeLeftInTrialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.TimeSpan Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.TimeSpan)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadLiftingProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadLiftingProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<POLift.Core.POLiftCloudService.IService>, POLift.Core.POLiftCloudService.IService {
        
        private BeginOperationDelegate onBeginGetAllLiftingProgramsDelegate;
        
        private EndOperationDelegate onEndGetAllLiftingProgramsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllLiftingProgramsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTimeLeftInTrialDelegate;
        
        private EndOperationDelegate onEndTimeLeftInTrialDelegate;
        
        private System.Threading.SendOrPostCallback onTimeLeftInTrialCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadLiftingProgramDelegate;
        
        private EndOperationDelegate onEndDownloadLiftingProgramDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadLiftingProgramCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAllLiftingProgramsCompletedEventArgs> GetAllLiftingProgramsCompleted;
        
        public event System.EventHandler<TimeLeftInTrialCompletedEventArgs> TimeLeftInTrialCompleted;
        
        public event System.EventHandler<DownloadLiftingProgramCompletedEventArgs> DownloadLiftingProgramCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult POLift.Core.POLiftCloudService.IService.BeginGetAllLiftingPrograms(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllLiftingPrograms(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram> POLift.Core.POLiftCloudService.IService.EndGetAllLiftingPrograms(System.IAsyncResult result) {
            return base.Channel.EndGetAllLiftingPrograms(result);
        }
        
        private System.IAsyncResult OnBeginGetAllLiftingPrograms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((POLift.Core.POLiftCloudService.IService)(this)).BeginGetAllLiftingPrograms(callback, asyncState);
        }
        
        private object[] OnEndGetAllLiftingPrograms(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram> retVal = ((POLift.Core.POLiftCloudService.IService)(this)).EndGetAllLiftingPrograms(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllLiftingProgramsCompleted(object state) {
            if ((this.GetAllLiftingProgramsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllLiftingProgramsCompleted(this, new GetAllLiftingProgramsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllLiftingProgramsAsync() {
            this.GetAllLiftingProgramsAsync(null);
        }
        
        public void GetAllLiftingProgramsAsync(object userState) {
            if ((this.onBeginGetAllLiftingProgramsDelegate == null)) {
                this.onBeginGetAllLiftingProgramsDelegate = new BeginOperationDelegate(this.OnBeginGetAllLiftingPrograms);
            }
            if ((this.onEndGetAllLiftingProgramsDelegate == null)) {
                this.onEndGetAllLiftingProgramsDelegate = new EndOperationDelegate(this.OnEndGetAllLiftingPrograms);
            }
            if ((this.onGetAllLiftingProgramsCompletedDelegate == null)) {
                this.onGetAllLiftingProgramsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllLiftingProgramsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllLiftingProgramsDelegate, null, this.onEndGetAllLiftingProgramsDelegate, this.onGetAllLiftingProgramsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult POLift.Core.POLiftCloudService.IService.BeginTimeLeftInTrial(string deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTimeLeftInTrial(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.TimeSpan POLift.Core.POLiftCloudService.IService.EndTimeLeftInTrial(System.IAsyncResult result) {
            return base.Channel.EndTimeLeftInTrial(result);
        }
        
        private System.IAsyncResult OnBeginTimeLeftInTrial(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceId = ((string)(inValues[0]));
            return ((POLift.Core.POLiftCloudService.IService)(this)).BeginTimeLeftInTrial(deviceId, callback, asyncState);
        }
        
        private object[] OnEndTimeLeftInTrial(System.IAsyncResult result) {
            System.TimeSpan retVal = ((POLift.Core.POLiftCloudService.IService)(this)).EndTimeLeftInTrial(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTimeLeftInTrialCompleted(object state) {
            if ((this.TimeLeftInTrialCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TimeLeftInTrialCompleted(this, new TimeLeftInTrialCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TimeLeftInTrialAsync(string deviceId) {
            this.TimeLeftInTrialAsync(deviceId, null);
        }
        
        public void TimeLeftInTrialAsync(string deviceId, object userState) {
            if ((this.onBeginTimeLeftInTrialDelegate == null)) {
                this.onBeginTimeLeftInTrialDelegate = new BeginOperationDelegate(this.OnBeginTimeLeftInTrial);
            }
            if ((this.onEndTimeLeftInTrialDelegate == null)) {
                this.onEndTimeLeftInTrialDelegate = new EndOperationDelegate(this.OnEndTimeLeftInTrial);
            }
            if ((this.onTimeLeftInTrialCompletedDelegate == null)) {
                this.onTimeLeftInTrialCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTimeLeftInTrialCompleted);
            }
            base.InvokeAsync(this.onBeginTimeLeftInTrialDelegate, new object[] {
                        deviceId}, this.onEndTimeLeftInTrialDelegate, this.onTimeLeftInTrialCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult POLift.Core.POLiftCloudService.IService.BeginDownloadLiftingProgram(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadLiftingProgram(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] POLift.Core.POLiftCloudService.IService.EndDownloadLiftingProgram(System.IAsyncResult result) {
            return base.Channel.EndDownloadLiftingProgram(result);
        }
        
        private System.IAsyncResult OnBeginDownloadLiftingProgram(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((POLift.Core.POLiftCloudService.IService)(this)).BeginDownloadLiftingProgram(fileName, callback, asyncState);
        }
        
        private object[] OnEndDownloadLiftingProgram(System.IAsyncResult result) {
            byte[] retVal = ((POLift.Core.POLiftCloudService.IService)(this)).EndDownloadLiftingProgram(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadLiftingProgramCompleted(object state) {
            if ((this.DownloadLiftingProgramCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadLiftingProgramCompleted(this, new DownloadLiftingProgramCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadLiftingProgramAsync(string fileName) {
            this.DownloadLiftingProgramAsync(fileName, null);
        }
        
        public void DownloadLiftingProgramAsync(string fileName, object userState) {
            if ((this.onBeginDownloadLiftingProgramDelegate == null)) {
                this.onBeginDownloadLiftingProgramDelegate = new BeginOperationDelegate(this.OnBeginDownloadLiftingProgram);
            }
            if ((this.onEndDownloadLiftingProgramDelegate == null)) {
                this.onEndDownloadLiftingProgramDelegate = new EndOperationDelegate(this.OnEndDownloadLiftingProgram);
            }
            if ((this.onDownloadLiftingProgramCompletedDelegate == null)) {
                this.onDownloadLiftingProgramCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadLiftingProgramCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadLiftingProgramDelegate, new object[] {
                        fileName}, this.onEndDownloadLiftingProgramDelegate, this.onDownloadLiftingProgramCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override POLift.Core.POLiftCloudService.IService CreateChannel() {
            return new ServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                return new System.ServiceModel.EndpointAddress("http://poliftcloudservice.cloudapp.net/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private class ServiceClientChannel : ChannelBase<POLift.Core.POLiftCloudService.IService>, POLift.Core.POLiftCloudService.IService {
            
            public ServiceClientChannel(System.ServiceModel.ClientBase<POLift.Core.POLiftCloudService.IService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllLiftingPrograms(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllLiftingPrograms", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram> EndGetAllLiftingPrograms(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram> _result = ((System.Collections.ObjectModel.ObservableCollection<POLift.Core.POLiftCloudService.LiftingProgram>)(base.EndInvoke("GetAllLiftingPrograms", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTimeLeftInTrial(string deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("TimeLeftInTrial", _args, callback, asyncState);
                return _result;
            }
            
            public System.TimeSpan EndTimeLeftInTrial(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.TimeSpan _result = ((System.TimeSpan)(base.EndInvoke("TimeLeftInTrial", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownloadLiftingProgram(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("DownloadLiftingProgram", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDownloadLiftingProgram(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("DownloadLiftingProgram", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService,
        }
    }
}
